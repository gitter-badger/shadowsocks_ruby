require "spec_helper"

RSpec.describe ShadowsocksRuby::Cipher do
  describe "#bytes_to_key" do
    it "should behavie like OpenSSL's EVP_BytesToKey" do
      pass = "password"
      data = "hello world!"

      #aes-128-ctr key_len 16  iv_len 16
      key1 = ShadowsocksRuby::Cipher.bytes_to_key(pass, 16, 16)
      cipher1 = ::OpenSSL::Cipher.new('aes-128-ctr')
      cipher1.encrypt
      iv = cipher1.random_iv
      cipher1.key = key1
      encrypt1 = cipher1.update(data) << cipher1.final

      # pkcs5_keyivgen is a wrapper for OpenSSL's EVP_BytesToKey
      cipher2 = ::OpenSSL::Cipher.new('aes-128-ctr')
      cipher2.encrypt
      cipher2.pkcs5_keyivgen(pass, nil, 1, "MD5")
      cipher2.iv = iv
      encrypt2 = cipher2.update(data) << cipher2.final

      expect(encrypt1).to eq encrypt2
    end
    it "should work with key_len/iv_len of 8 and 12" do
      pass = "password"
      key1 = ShadowsocksRuby::Cipher.bytes_to_key(pass, 16, 8)
      expect(key1.length).to eq 16
      key1 = ShadowsocksRuby::Cipher.bytes_to_key(pass, 12, 12)
      expect(key1.length).to eq 12
    end
  end
  describe "#hmac_sha1_digest" do
    it "should get first 10 bytes from hmac sha1 digest" do
      key = 'key'
      data = 'The quick brown fox jumps over the lazy dog'
      hmac = ::OpenSSL::HMAC.digest('sha1', key, data)[0, 10]
      expect(ShadowsocksRuby::Cipher::hmac_sha1_digest(key, data)).to eq hmac
    end
  end
end

RSpec.shared_examples "a cipher with iv" do
  def enc_dec message
    iv = subject.random_iv
    encrypt_message = subject.encrypt(message, iv)
    subject.decrypt(encrypt_message, iv)
  end
  it "should get the same message back after #encrypt & #decrypt" do
      message = "hello world"
      expect(enc_dec(message)).to eq message
  end
  it "should work 3 times using same password but different message & iv" do
      message = "hello world"
      expect(enc_dec(message)).to eq message
      message = "foo bar"
      expect(enc_dec(message)).to eq message
      message = "Lorem ipsum dolor sit amet, consectetur adipisicing elit " \
      ". Esse voluptatum, quasi quos dolor autem excepturi nemo eum saepe " \
      "quia eius quas rem sint, beatae vero impedit. Modi officia ipsa, minima!"
      expect(enc_dec(message)).to eq message
  end
end

RSpec.describe ShadowsocksRuby::Cipher::Table do
  it "#encrypt should return same result as test vectors" do
    password = "foobar!"
    subject = ShadowsocksRuby::Cipher::Table.new password
    message = "hello world!"

    # generated using origin shadowsocks's table encrypt function
    expected_message = [199, 140, 123, 123, 82, 236, 5, 82, 87, 123, 117, 46].pack("C*")
    expect(subject.encrypt(message)).to eq expected_message
  end
  it "#decrypt should return same result as test vectors" do
    password = "foobar!"
    subject = ShadowsocksRuby::Cipher::Table.new password
    # generated using origin shadowsocks's table encrypt function
    encrypt_message = [199, 140, 123, 123, 82, 236, 5, 82, 87, 123, 117, 46].pack("C*")
    expected_message = "hello world!"

    expect(subject.decrypt(encrypt_message)).to eq expected_message
  end
end

RSpec.describe ShadowsocksRuby::Cipher::RC4_MD5 do
    subject { ShadowsocksRuby::Cipher::RC4_MD5.new "foobar!"}
    it_behaves_like "a cipher with iv"
end

RSpec.describe ShadowsocksRuby::Cipher::OpenSSL do
  describe "aes-256-cfb" do
    subject { ShadowsocksRuby::Cipher::OpenSSL.new 'aes-256-cfb', "secret"}
    it_behaves_like "a cipher with iv"
    it "#encrypt should return same result as test vectors" do
      # test vectors generated by sniff TCP traffic data of shadowsocks-python
      iv = ShadowsocksRuby::Util.hex2bin("309483561469ce71ddda574ac7e4f097")
      m1 = ShadowsocksRuby::Util.hex2bin("5e5ca73edd666f553b0548d63f")
      m2 = ShadowsocksRuby::Util.hex2bin("b815ba23cb22f09268d45d08baae6312ddb7325134d1e3c59a4d927af2bdcd09c44751d5705b4d026fa17a4a02d8e6ec9c2ff5e3ebeb34f9951a2ad0c9851192d4087e30b376af34fd")
      expect(subject.decrypt(m1, iv)).to eq(ShadowsocksRuby::Util.hex2bin("03093132372e302e302e310050"))
      expect(subject.decrypt(m2, iv)).to eq(ShadowsocksRuby::Util.hex2bin("474554202f20485454502f312e310d0a486f73743a203132372e302e302e310d0a557365722d4167656e743a206375726c2f372e34372e300d0a4163636570743a202a2f2a0d0a0d0a"))
    end
  end
end

RSpec.describe ShadowsocksRuby::Cipher::RbNaCl do
  describe "chacha20" do
    subject { ShadowsocksRuby::Cipher::RbNaCl.new 'chacha20', "foobar!"}
    it_behaves_like "a cipher with iv"
  end
  describe "salsa20" do
    subject { ShadowsocksRuby::Cipher::RbNaCl.new 'salsa20', "foobar!"}
    it_behaves_like "a cipher with iv"
  end
  describe "chacha20-ietf" do
    subject { ShadowsocksRuby::Cipher::RbNaCl.new 'chacha20-ietf', "foobar!"}
    it_behaves_like "a cipher with iv"
  end
end
